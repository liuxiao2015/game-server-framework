# 排行榜模块配置文件
# 文件名: application-ranking.yml
# 用途: 排行榜系统的配置模板
# 说明: 包含Redis配置、缓存策略、更新规则、结算时间等核心配置

game:
  ranking:
    # Redis配置
    redis:
      # Redis运行模式: standalone(单机) / cluster(集群) / sentinel(哨兵)
      mode: standalone
      # Redis服务器地址列表
      addresses:
        - redis://127.0.0.1:6379
        # 集群模式示例:
        # - redis://127.0.0.1:7001
        # - redis://127.0.0.1:7002
        # - redis://127.0.0.1:7003
      # Redis密码
      password: ${REDIS_PASSWORD:}
      # 数据库索引
      database: 0
      # 连接超时时间
      connect-timeout: 10s
      # 读取超时时间
      read-timeout: 10s
      # 连接池配置
      pool:
        # 最大连接数
        max-total: 20
        # 最大空闲连接数
        max-idle: 10
        # 最小空闲连接数
        min-idle: 2
    
    # 全局配置
    global:
      # 默认榜单大小
      default-size: 100
      # 分页查询每页大小
      page-size: 20
      # 批量更新大小
      update-batch-size: 1000
      # 是否启用历史记录
      enable-history: true
      # Redis键前缀
      key-prefix: "ranking:"
    
    # 缓存配置
    cache:
      # 是否启用缓存
      enabled: true
      # 缓存过期时间
      expire-time: 5m
      # 是否启用缓存预热
      warm-up: true
      # 最大缓存条目数
      max-entries: 10000
      # 本地缓存配置
      local:
        # 是否启用本地缓存
        enabled: true
        # 本地缓存最大大小
        max-size: 1000
        # 本地缓存过期时间
        expire-time: 1m
    
    # 更新策略配置
    update:
      # 更新模式: realtime(实时) / batch(批量) / mixed(混合)
      mode: realtime
      # 批量处理间隔
      batch-interval: 10s
      # 更新队列大小
      queue-size: 10000
      # 更新处理线程数
      update-threads: 4
      # 批量更新最大等待时间
      max-wait-time: 5s
    
    # 结算配置
    settlement:
      # 每日重置时间 (HH:mm:ss格式)
      daily-reset-time: "00:00:00"
      # 每周重置日 (MONDAY/TUESDAY/...等)
      weekly-reset-day: MONDAY
      # 每月重置日 (1-28)
      monthly-reset-day: 1
      # 赛季持续时间
      season-duration: 90d
      # 是否自动结算
      auto-settle: true
    
    # 监控配置
    monitor:
      # 是否启用监控
      enabled: true
      # 指标收集间隔
      metrics-interval: 60s
      # 慢查询阈值
      slow-query-threshold: 100ms
      # 是否记录详细日志
      detailed-logging: false

# Spring配置
spring:
  # Redis配置 (使用上面的game.ranking.redis配置)
  data:
    redis:
      host: ${game.ranking.redis.addresses[0]:127.0.0.1}
      port: 6379
      password: ${game.ranking.redis.password:}
      database: ${game.ranking.redis.database:0}
      timeout: ${game.ranking.redis.connect-timeout:10s}
      lettuce:
        pool:
          max-active: ${game.ranking.redis.pool.max-total:20}
          max-idle: ${game.ranking.redis.pool.max-idle:10}
          min-idle: ${game.ranking.redis.pool.min-idle:2}

# 日志配置
logging:
  level:
    com.lx.gameserver.business.ranking: DEBUG
    root: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# 服务器配置
server:
  port: 8080
  servlet:
    context-path: /game-server

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev

game:
  ranking:
    redis:
      mode: standalone
      addresses:
        - redis://localhost:6379
    monitor:
      detailed-logging: true

logging:
  level:
    com.lx.gameserver.business.ranking: DEBUG

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod

game:
  ranking:
    redis:
      mode: cluster
      addresses:
        - redis://redis-node1:6379
        - redis://redis-node2:6379
        - redis://redis-node3:6379
      password: ${REDIS_PASSWORD}
    cache:
      max-entries: 50000
    update:
      update-threads: 8
    monitor:
      detailed-logging: false

logging:
  level:
    com.lx.gameserver.business.ranking: INFO
    root: WARN

---
# 测试环境配置
spring:
  config:
    activate:
      on-profile: test

game:
  ranking:
    redis:
      mode: standalone
      addresses:
        - redis://test-redis:6379
    global:
      default-size: 50
    cache:
      enabled: false
    update:
      mode: batch
      batch-interval: 5s

logging:
  level:
    com.lx.gameserver.business.ranking: DEBUG