# =============================================================================
# 游戏服务器框架 - 持续集成流程
# =============================================================================
# 功能: 代码检查、构建、测试、质量扫描
# 触发: push, pull_request
# =============================================================================

name: CI - 持续集成

on:
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

# 环境变量
env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2g -XX:+UseG1GC'
  
# 并发控制
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===========================================================================
  # 代码检查
  # ===========================================================================
  code-analysis:
    name: 代码分析
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完整历史用于SonarQube
        
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 缓存Maven依赖
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: 代码格式检查
      run: |
        mvn spotless:check || echo "代码格式问题，请运行 mvn spotless:apply 修复"
        
    - name: Checkstyle检查
      run: mvn checkstyle:check
      
    - name: SpotBugs检查
      run: mvn compile spotbugs:check || true
      
    - name: 依赖安全检查
      run: mvn dependency-check:check || true
      
    - name: 上传代码分析报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-analysis-reports
        path: |
          target/site/
          target/spotbugs/
          target/dependency-check-report.html
        retention-days: 7

  # ===========================================================================
  # 矩阵构建测试
  # ===========================================================================
  build-and-test:
    name: 构建测试 (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: code-analysis
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 缓存Maven依赖
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: 下载依赖
      run: mvn dependency:go-offline -B
      
    - name: 编译项目
      run: mvn compile -B -T 4
      
    - name: 运行单元测试
      run: mvn test -B -T 4
      
    - name: 运行集成测试
      run: mvn integration-test -B
      
    - name: 生成测试报告
      run: mvn surefire-report:report-only jacoco:report
      
    - name: 上传测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          target/surefire-reports/
          target/failsafe-reports/
          target/site/jacoco/
        retention-days: 7
        
    - name: 上传覆盖率到Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        files: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  # ===========================================================================
  # 容器构建测试
  # ===========================================================================
  docker-build:
    name: Docker构建测试
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-and-test
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 构建Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: gameserver-framework:ci
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 测试Docker镜像
      run: |
        # 启动容器进行基本测试
        docker run --rm -d --name test-container \
          -e SPRING_PROFILES_ACTIVE=test \
          gameserver-framework:ci
        
        # 等待容器启动
        sleep 30
        
        # 检查容器状态
        docker ps -a
        
        # 检查健康状态（如果有）
        docker exec test-container curl -f http://localhost:8090/actuator/health || true
        
        # 停止容器
        docker stop test-container

  # ===========================================================================
  # 安全扫描
  # ===========================================================================
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-analysis
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 缓存Maven依赖
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: OWASP依赖检查
      run: mvn dependency-check:check -DfailBuildOnCVSS=7
      continue-on-error: true
      
    - name: Trivy文件系统扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传Trivy扫描结果到GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===========================================================================
  # 性能测试
  # ===========================================================================
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 启动测试环境
      run: |
        docker-compose -f docker-compose.dev.yml up -d mysql-dev redis-dev
        
    - name: 等待服务就绪
      run: |
        timeout 60 bash -c 'until docker-compose -f docker-compose.dev.yml exec -T mysql-dev mysqladmin ping; do sleep 1; done'
        
    - name: 运行性能测试
      run: |
        mvn test -Dtest=PerformanceTest || true
        
    - name: 清理测试环境
      if: always()
      run: |
        docker-compose -f docker-compose.dev.yml down -v

  # ===========================================================================
  # 质量门禁
  # ===========================================================================
  quality-gate:
    name: 质量门禁
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-analysis, build-and-test, docker-build, security-scan]
    if: always()
    
    steps:
    - name: 检查质量门禁
      run: |
        # 检查前置任务状态
        if [[ "${{ needs.code-analysis.result }}" != "success" ]]; then
          echo "代码分析失败"
          exit 1
        fi
        
        if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
          echo "构建测试失败"
          exit 1
        fi
        
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Docker构建失败"
          exit 1
        fi
        
        echo "所有质量检查通过"

  # ===========================================================================
  # 构建状态通知
  # ===========================================================================
  notify:
    name: 构建通知
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: 准备通知内容
      id: prepare
      run: |
        if [[ "${{ needs.quality-gate.result }}" == "success" ]]; then
          echo "status=✅ 成功" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        else
          echo "status=❌ 失败" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        fi
        
        echo "commit_message=$(git log -1 --pretty=format:'%s' | head -c 100)" >> $GITHUB_OUTPUT
        echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        
    - name: 发送构建状态通知
      if: env.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "游戏服务器框架 CI 构建 ${{ steps.prepare.outputs.status }}",
            "attachments": [{
              "color": "${{ steps.prepare.outputs.color }}",
              "fields": [
                {"title": "分支", "value": "${{ github.ref_name }}", "short": true},
                {"title": "提交者", "value": "${{ steps.prepare.outputs.commit_author }}", "short": true},
                {"title": "提交信息", "value": "${{ steps.prepare.outputs.commit_message }}", "short": false},
                {"title": "构建链接", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}