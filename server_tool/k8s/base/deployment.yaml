# Kubernetes Deployment for GameServer Framework
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gameserver-app
  labels:
    app: gameserver
    component: application
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: gameserver
      component: application
  template:
    metadata:
      labels:
        app: gameserver
        component: application
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: gameserver-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: gameserver
        image: gameserver-framework:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: admin
          containerPort: 8090
          protocol: TCP
        - name: tcp-game
          containerPort: 9090
          protocol: TCP
        - name: websocket
          containerPort: 9091
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "k8s,prod"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: gameserver-config
              key: db.host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: gameserver-config
              key: db.port
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: gameserver-config
              key: db.name
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: gameserver-db-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gameserver-db-secret
              key: password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: gameserver-config
              key: redis.host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: gameserver-config
              key: redis.port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gameserver-redis-secret
              key: password
              optional: true
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: gameserver-jwt-secret
              key: secret
        - name: JAVA_OPTS
          value: >-
            -XX:+UseContainerSupport
            -XX:MaxRAMPercentage=75.0
            -XX:+UseG1GC
            -XX:+UseStringDeduplication
            -XX:+PrintGCDetails
            -XX:+PrintGCTimeStamps
            -Xloggc:/app/logs/gc.log
            -XX:+UseGCLogFileRotation
            -XX:NumberOfGCLogFiles=3
            -XX:GCLogFileSize=10M
            -Djava.security.egd=file:/dev/./urandom
            -Dspring.profiles.active=k8s,prod
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: admin
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: admin
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /actuator/health
            port: admin
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 18
          successThreshold: 1
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: config
        configMap:
          name: gameserver-config
          defaultMode: 0644
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: temp
        emptyDir:
          sizeLimit: 500Mi
      - name: cache
        emptyDir:
          sizeLimit: 500Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - gameserver
                - key: component
                  operator: In
                  values:
                  - application
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30
      nodeSelector:
        kubernetes.io/os: linux
      terminationGracePeriodSeconds: 60